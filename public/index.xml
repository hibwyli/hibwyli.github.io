<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hibwyli</title>
    <link>//localhost:1313/</link>
    <description>Recent content on hibwyli</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright Â© Hibwyli</copyright>
    <lastBuildDate>Tue, 25 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="//localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>PicoCTF 2025</title>
      <link>//localhost:1313/posts/pico/</link>
      <pubDate>Tue, 25 Mar 2025 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/posts/pico/</guid>
      <description>Secure Email Service # This is the hardest web challenge from picoCTF. Knowledge : MIME email document structure, Signed Email, Header Injection, Breaking weak cryptography.
Find the sink : # So the challenge gives us a bot with flag in localStorage and does some stuffs. from os import environ from playwright.async_api import async_playwright, expect import asyncio import re flag = environ.get(&amp;#39;FLAG&amp;#39;, &amp;#39;picoCTF{flag}&amp;#39;) password = environ.get(&amp;#39;PASSWORD&amp;#39;, &amp;#39;admin@ses&amp;#39;) async def bot(): async with asyncio.</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="//localhost:1313/posts/pico/feature.png" />
    </item>
    
    <item>
      <title>Hack The Box University 2024</title>
      <link>//localhost:1313/posts/htb/</link>
      <pubDate>Tue, 27 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/posts/htb/</guid>
      <description>Write ups HTB UNIVERSITY # Web armaxis # Logic is only thing
Overview : # We are given a page and a email host to receive OTP. Main goal is to get access as an admin. We can abuse the forget password function to achieve change the admin password due to flaw in implementation.
router.post(&amp;#34;/reset-password&amp;#34;, async (req, res) =&amp;gt; { const { token, newPassword, email } = req.body; // Added &amp;#39;email&amp;#39; parameter if (!</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="//localhost:1313/posts/htb/feature_wanna.jpg" />
    </item>
    
    <item>
      <title>Sushi Search and Chrome Detect Engine</title>
      <link>//localhost:1313/posts/sushi/</link>
      <pubDate>Tue, 27 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/posts/sushi/</guid>
      <description>Sushi Search # Read this before : Blog
Type: Xss through missing charset
Chromium detect engine This is really hard to me , and i just can solve after reading script :v SOURCE CODE : # This type of ctfs is just creating a xss url and send to bot and get their cookies(flag) , so we focus on Xss. But &amp;hellip;. :::danger They sanitize it with DomPurify at newest version !</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="//localhost:1313/posts/sushi/feature_life.png" />
    </item>
    
    <item>
      <title>WannaGame</title>
      <link>//localhost:1313/posts/wannagame/</link>
      <pubDate>Tue, 27 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/posts/wannagame/</guid>
      <description>Write ups WannaGame # Dox List: # Source code : # CVE-2024-42352: https://nvd.nist.gov/vuln/detail/CVE-2024-42352
Server :
@app.route(&amp;#39;/health_check&amp;#39;) def health_check(): cmd = request.args.get(&amp;#39;cmd&amp;#39;) or &amp;#39;ping&amp;#39; health_check = f&amp;#39;echo \&amp;#39;db.runCommand(&amp;#34;{cmd}&amp;#34;).ok\&amp;#39; | mongosh mongodb:27017/app --quiet&amp;#39; try: result = subprocess.run(health_check, shell=True, capture_output=True, text=True, timeout=2) app.logger.info(result) return &amp;#39;Database is responding&amp;#39; if &amp;#39;1&amp;#39; in result.stdout else &amp;#39;Database is not responding&amp;#39; except subprocess.TimeoutExpired: return &amp;#39;Database is not responding&amp;#39; @app.route(&amp;#39;/api/dogs&amp;#39;) def get_dogs(): app.logger.info(f&amp;#34;Requests Header : {request.headers}&amp;#34;) dogs = [] for dog in app_db[&amp;#39;doxlist&amp;#39;].</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="//localhost:1313/posts/wannagame/feature_wanna.jpg" />
    </item>
    
    <item>
      <title>About</title>
      <link>//localhost:1313/about/</link>
      <pubDate>Mon, 13 Jun 2022 20:55:37 +0100</pubDate>
      
      <guid>//localhost:1313/about/</guid>
      <description>Im just a student wanna learn to sec
Here is the place I note my journey !</description>
      
    </item>
    
  </channel>
</rss>
